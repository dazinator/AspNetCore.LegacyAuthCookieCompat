using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AspNetCore.LegacyAuthCookieCompat.Tests
{
    [TestClass]
    public class CookieCompatSHA384Tests
    {
        // web.config : <machineKey validation="HMACSHA384" decryption="AES" ...
        private const string SHA384ValidationKey = "2FCC2DFFD60634EEDEB1FF7BB88521DDC74D904423B0882C7577EDDFB8E052F1A56B9EE70D8F4AD2D766D5BF8265D918972D38B98616BD4C8E8351FDB52D1126";
        private const string SHA384DecryptionKey = "9BD7F2E3CE750ED2F5B586297530298913507215ABC9A776";

        [TestMethod]
        public void Can_Decrypt_Forms_Authentication_Ticket_WithSha384()
        {
            // Arrange
            var encryptor = new LegacyFormsAuthenticationTicketEncryptor(SHA384DecryptionKey, SHA384ValidationKey, ShaVersion.Sha384);

            // Act
            // this cookie has been generated by legacy FormsAuthentication
            var encryptedText = "6DB12C44C7D2DEA32CC592392F1C8D4CB913B6119FB944DCA575E7CB1471F7FDA2AC157ED0595AF229F35AD35C013D460A65CC0249C2C327B9307D1BA5D56006D77770BAFB0E586FCD88B1BB271F54DC36B1F9D3CDCD1498215B240F41B793DF00717487F73047D2F68EA77EEE455B340A3411B8A3224DF8A59A1F760B5911ED0E8C59A31301A283B44D69616B59D8D9640F5B44E43C73A65F83CE9F5E217EAE7F60B9CAAB231E0C450A1DD037EF268BB527884904473992319548B681D2DE3DD9085469977CF3CC439DCA3B3A3ED6AB45CD592D08B522E1EB86CFE8E9387F6FA7FD7D2357EF61513865102CE4CF623BFE833039B9B1FBB715A8153E5C042A39";

            FormsAuthenticationTicket result = encryptor.DecryptCookie(encryptedText);

            Assert.AreEqual("/", result.CookiePath);
            Assert.AreEqual(false, result.IsPersistent);
            Assert.AreEqual("foo@bar.com", result.Name);
            Assert.AreEqual("610d71b6-e7f6-459d-9150-d6dc21df52ff", result.UserData);
            Assert.AreEqual(2, result.Version);
            Assert.AreEqual(result.IssueDate, new DateTime(637638445761347384, DateTimeKind.Utc).ToLocalTime());
            Assert.AreEqual(result.Expiration, new DateTime(637638481761347384, DateTimeKind.Utc).ToLocalTime());
        }

        [TestMethod]
        public void Can_Encrypt_And_Decrypt_Forms_Authentication_Ticket_WithSha384()
        {
            // Arrange
            var issueDateUtc = DateTime.UtcNow;
            var expiryDateUtc = issueDateUtc.AddHours(1);
            var formsAuthenticationTicket = new FormsAuthenticationTicket(2, "foo@bar.com", issueDateUtc.ToLocalTime(), expiryDateUtc.ToLocalTime(), false, "a43ed14f-82ae-4e65-9118-0c484917177a", "/");

            var encryptor = new LegacyFormsAuthenticationTicketEncryptor(SHA384DecryptionKey, SHA384ValidationKey, ShaVersion.Sha384);

            // Act
            // We encrypt the forms auth cookie.
            var encryptedText = encryptor.Encrypt(formsAuthenticationTicket);

            Assert.IsNotNull(encryptedText);

            // We decrypt the encypted text back into a forms auth ticket, and compare it to the original ticket to make sure it
            // roundtripped successfully.
            FormsAuthenticationTicket decryptedFormsAuthenticationTicket = encryptor.DecryptCookie(encryptedText);

            Assert.AreEqual(formsAuthenticationTicket.CookiePath, decryptedFormsAuthenticationTicket.CookiePath);
            Assert.AreEqual(formsAuthenticationTicket.IsPersistent, decryptedFormsAuthenticationTicket.IsPersistent);
            Assert.AreEqual(formsAuthenticationTicket.UserData, decryptedFormsAuthenticationTicket.UserData);
            Assert.AreEqual(formsAuthenticationTicket.Version, decryptedFormsAuthenticationTicket.Version);
            Assert.AreEqual(formsAuthenticationTicket.Expired, decryptedFormsAuthenticationTicket.Expired);
            Assert.AreEqual(formsAuthenticationTicket.IsValid(), decryptedFormsAuthenticationTicket.IsValid());
            Assert.AreEqual(false, decryptedFormsAuthenticationTicket.Expired);
            Assert.AreEqual(true, decryptedFormsAuthenticationTicket.IsValid());
            Assert.AreEqual(formsAuthenticationTicket.Expiration, decryptedFormsAuthenticationTicket.Expiration);
            Assert.AreEqual(formsAuthenticationTicket.IssueDate, decryptedFormsAuthenticationTicket.IssueDate);
        }
    }
}
